# -*- coding: utf-8 -*-
"""Group19._SportsPrediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T7bJ_rUU62uBQ79ZnPDYnHXLWvh_o8ev
"""

import os
import pandas as pd
import joblib
import pickle

from google.colab import drive
drive.mount ('/content/drive')

file1_path= os.path.abspath ('/content/drive/My Drive/INTRO TO AI/players_21.csv')

file2_path= os.path.abspath ('/content/drive/My Drive/INTRO TO AI/players_22.csv')

fifa21= pd.read_csv(file1_path)

fifa22= pd.read_csv(file2_path)

fifa21df= pd.DataFrame(fifa21)

#creating a subset of the categorical columns from the dataset
categorical_attributes = fifa21.select_dtypes(include=['object', 'category']).columns
attribute_names = categorical_attributes
attribute_names

from sklearn.preprocessing import LabelEncoder

#encoding the categorical columns
selected_columns_df = fifa21[attribute_names]
label_encoder = LabelEncoder()
label_encoded = selected_columns_df.apply(lambda x: label_encoder.fit_transform(x))
label_encoded
categorical_attributes = pd.DataFrame(label_encoded)

label_encoded

#creating a subset of the categorical columns from the dataframe
#selected_columns_df = fifa21df[attribute_names]
#dropping the categorical columns based on theor description on kaggle
fifa21df= fifa21df.drop(selected_columns_df ,axis=1)
fifa21df

#new dataframe with all values encoded
fifa21df

#dropping columns with low correlation values
correlations = fifa21df.corrwith(fifa21df['overall'])
correlation_threshold= 0.25
low_corr_columns = correlations.index[correlations < correlation_threshold]
print(low_corr_columns)
fifa21df = fifa21df.drop(columns=low_corr_columns)
fifa21df

# List of individual features to be combined
power_attributes = ['power_shot_power', 'power_jumping', 'power_stamina', 'power_strength', 'power_long_shots']

# Create a new feature "power_combined" by calculating the mean of the individual features
fifa21df['power_combined'] = fifa21df[power_attributes].mean(axis=1)

# Replace missing (NaN) values with 0
fifa21df['power_combined'] = fifa21df['power_combined'].fillna(0)


# Now, you can drop the individual features if needed
fifa21df = fifa21df.drop(power_attributes, axis=1)

# List of individual features to be combined
mentality_attributes = ['mentality_aggression', 'mentality_interceptions', 'mentality_positioning', 'mentality_vision', 'mentality_penalties', 'mentality_composure']

# Create a new feature "mentality_combined" by calculating the mean of the individual features
fifa21df['mentality_combined'] = fifa21df[mentality_attributes].mean(axis=1)

# Replace missing (NaN) values with 0
fifa21df['mentality_combined'] = fifa21df['mentality_combined'].fillna(0)


# Now, you can drop the individual features if needed
fifa21df = fifa21df.drop(mentality_attributes, axis=1)

# List of individual features to be combined
skill_attributes = ['skill_moves', 'skill_dribbling', 'skill_curve', 'skill_fk_accuracy', 'skill_long_passing', 'skill_ball_control']

# Create a new feature "skill_combined" by calculating the mean of the individual features
fifa21df['skill_combined'] = fifa21df[skill_attributes].mean(axis=1)

# Replace missing (NaN) values with 0
fifa21df['skill_combined'] = fifa21df['skill_combined'].fillna(0)


# Now, you can drop the individual features if needed
fifa21df = fifa21df.drop(skill_attributes, axis=1)

# List of individual features to be combined
attackikng_attributes = ['attacking_crossing', 'attacking_finishing', 'attacking_heading_accuracy', 'attacking_short_passing', 'attacking_volleys']

# Create a new feature "attacking_combined" by calculating the mean of the individual features
fifa21df['attacking_combined'] = fifa21df[attackikng_attributes].mean(axis=1)

# Replace missing (NaN) values with 0
fifa21df['attacking_combined'] = fifa21df['attacking_combined'].fillna(0)


# Now, you can drop the individual features if needed
fifa21df = fifa21df.drop(attackikng_attributes, axis=1)

# List of individual features to be combined
movement_attributes = ['movement_agility', 'movement_reactions']

# Create a new feature "movement_combined" by calculating the mean of the individual features
fifa21df['movement_combined'] = fifa21df[movement_attributes].mean(axis=1)

# Replace missing (NaN) values with 0
fifa21df['movement_combined'] = fifa21df['movement_combined'].fillna(0)


# Now, you can drop the individual features if needed
fifa21df = fifa21df.drop(movement_attributes, axis=1)

# List of individual features to be combined
defending_attributes = ['defending_standing_tackle', 'defending_marking_awareness', 'defending']

# Create a new feature "movement_combined" by calculating the mean of the individual features
fifa21df['defending_combined'] = fifa21df[defending_attributes].mean(axis=1)

# Replace missing (NaN) values with 0
fifa21df['defending_combined'] = fifa21df['defending_combined'].fillna(0)


# Now, you can drop the individual features if needed
fifa21df = fifa21df.drop(defending_attributes, axis=1)

#training the model
y=fifa21df['overall']
x=fifa21df.drop('overall',axis=1)
x.info()

from sklearn.model_selection import train_test_split

Xtrain,Xtest,Ytrain,Ytest=train_test_split(x,y,test_size=0.2,random_state=42)

#removing NaNs
from sklearn.impute import SimpleImputer

imputer = SimpleImputer(strategy='mean')

Xtrain = imputer.fit_transform(Xtrain)
Xtest = imputer.fit_transform(Xtest)

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(Xtrain)

from sklearn.ensemble import VotingRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.tree import DecisionTreeRegressor
import xgboost as xgb
from xgboost import XGBRegressor

rf_regressor = RandomForestRegressor(n_estimators=100, random_state=42)

rf_regressor.fit(X_train_scaled, Ytrain)

y_pred = rf_regressor.predict(Xtest)

dt=DecisionTreeRegressor(criterion='absolute_error')

xgb_regressor = XGBRegressor(n_estimators=100, random_state=42)

xgb_regressor.fit(X_train_scaled, Ytrain)

y_pred = xgb_regressor.predict(Xtest)

#the ensemble model
voting_regressor = VotingRegressor(estimators=[
    ('decision_tree', dt),
    ('xgboost', xgb_regressor),
    ('random_forest', rf_regressor)
])

from sklearn.metrics import mean_absolute_error

for model in (dt, rf_regressor, xgb_regressor, voting_regressor):
    model.fit(Xtrain, Ytrain)
    y_pred = model.predict(Xtest)
    print(model.__class__.__name__, "MAE:", mean_absolute_error(Ytest, y_pred))

"""TRAINING WITH PLAYER_22"""

fifa22df= pd.DataFrame(fifa22)

#creating a subset of the categorical columns from the dataset
categorical_attributes2 = fifa22.select_dtypes(include=['object', 'category']).columns
attribute_names2 = categorical_attributes2
attribute_names2

#encoding the categorical columns
selected_columns_df2 = fifa22[attribute_names2]
label_encoder2 = LabelEncoder()
label_encoded2 = selected_columns_df2.apply(lambda x: label_encoder.fit_transform(x))
label_encoded2
categorical_attributes2 = pd.DataFrame(label_encoded2)

#creating a subset of the categorical columns from the dataframe
selected_columns_df2 = fifa22df[attribute_names2]
#dropping the categorical columns
fifa22df= fifa22df.drop(selected_columns_df2 ,axis=1)
fifa22df

#combining the encoded categorical columns with the new dataframe
fifa22df

#dropping columns with low correlation values
correlations2 = fifa22df.corrwith(fifa22df['overall'])
correlation_threshold2= 0.25
low_corr_columns2 = correlations2.index[correlations2 < correlation_threshold2]
print(low_corr_columns2)
fifa22df = fifa22df.drop(columns=low_corr_columns2)

# List of individual features to be combined
power_attributes = ['power_shot_power', 'power_jumping', 'power_stamina', 'power_strength', 'power_long_shots']

# Create a new feature "power_combined" by calculating the mean of the individual features
fifa22df['power_combined'] = fifa22df[power_attributes].mean(axis=1)

# Replace missing (NaN) values with 0
fifa22df['power_combined'] = fifa22df['power_combined'].fillna(0)


# Now, you can drop the individual features if needed
fifa22df = fifa22df.drop(power_attributes, axis=1)

# List of individual features to be combined
mentality_attributes = ['mentality_aggression', 'mentality_interceptions', 'mentality_positioning', 'mentality_vision', 'mentality_penalties', 'mentality_composure']

# Create a new feature "mentality_combined" by calculating the mean of the individual features
fifa22df['mentality_combined'] = fifa22df[mentality_attributes].mean(axis=1)

# Replace missing (NaN) values with 0
fifa22df['mentality_combined'] = fifa22df['mentality_combined'].fillna(0)


# Now, you can drop the individual features if needed
fifa22df = fifa22df.drop(mentality_attributes, axis=1)

# List of individual features to be combined
skill_attributes = ['skill_moves', 'skill_dribbling', 'skill_curve', 'skill_fk_accuracy', 'skill_long_passing', 'skill_ball_control']

# Create a new feature "skill_combined" by calculating the mean of the individual features
fifa22df['skill_combined'] = fifa22df[skill_attributes].mean(axis=1)

# Replace missing (NaN) values with 0
fifa22df['skill_combined'] = fifa22df['skill_combined'].fillna(0)


# Now, you can drop the individual features if needed
fifa22df = fifa22df.drop(skill_attributes, axis=1)

# List of individual features to be combined
attackikng_attributes = ['attacking_crossing', 'attacking_finishing', 'attacking_heading_accuracy', 'attacking_short_passing', 'attacking_volleys']

# Create a new feature "attacking_combined" by calculating the mean of the individual features
fifa22df['attacking_combined'] = fifa22df[attackikng_attributes].mean(axis=1)

# Replace missing (NaN) values with 0
fifa22df['attacking_combined'] = fifa22df['attacking_combined'].fillna(0)


# Now, you can drop the individual features if needed
fifa22df = fifa22df.drop(attackikng_attributes, axis=1)

# List of individual features to be combined
movement_attributes = ['movement_agility', 'movement_reactions']

# Create a new feature "movement_combined" by calculating the mean of the individual features
fifa22df['movement_combined'] = fifa22df[movement_attributes].mean(axis=1)

# Replace missing (NaN) values with 0
fifa22df['movement_combined'] = fifa22df['movement_combined'].fillna(0)


# Now, you can drop the individual features if needed
fifa22df = fifa22df.drop(movement_attributes, axis=1)

# List of individual features to be combined
defending_attributes = ['defending_standing_tackle', 'defending_marking_awareness', 'defending']

# Create a new feature "movement_combined" by calculating the mean of the individual features
fifa22df['defending_combined'] = fifa22df[defending_attributes].mean(axis=1)

# Replace missing (NaN) values with 0
fifa22df['defending_combined'] = fifa22df['defending_combined'].fillna(0)


# Now, you can drop the individual features if needed
fifa22df = fifa22df.drop(defending_attributes, axis=1)

fifa22df

#testing the model with the players_22 data
y1=fifa22df['overall']
x1=fifa22df.drop('overall',axis=1)
x1.info()

Xtrain2,Xtest2,Ytrain2,Ytest2=train_test_split(x1,y1,test_size=0.2,random_state=42)

#removing NaNs
from sklearn.impute import SimpleImputer

imputer = SimpleImputer(strategy='mean')

Xtrain2 = imputer.fit_transform(Xtrain2)
Xtest2 = imputer.fit_transform(Xtest2)

scaler = StandardScaler()
X2_train_scaled = scaler.fit_transform(Xtrain2)

ypred = voting_regressor.predict(Xtest2)

mae = mean_absolute_error(Ytest2, ypred)
mae

joblib.dump(scaler, '/content/drive/My Drive/scaler_ensemble.pkl')

import pickle

filename= '/content/drive/My Drive/ensemble_model.pkl'
pickle.dump(voting_regressor, open(filename, 'wb'))
loaded_model= pickle.load(open(filename, 'rb'))

"""joblib.dump(scaler,'/content/drive/My Drive/INTRO TO AI/players_21.csv'/scaler.pkl')

filename = '/content/drive/My Drive/INTRO TO AI/players_21.csv'/model.pkl'
pickle.dump(voting_regressor,open(filename, 'wb'))
loaded_model = pickle.load(open(filename, 'rb'))
"""